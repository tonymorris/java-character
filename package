#!/usr/bin/env runhaskell

import Data.List
import Data.Time
import System.Directory
import System.Environment
import System.FilePath
import System.IO

main ::
  IO ()
main = 
  do args <- getArgs
     case args of
       [] -> 
         do n <- getProgName
            hPutStrLn stderr (n ++ " <package-name> [first-module]")
       (h:t) ->
         let piml = "package.iml"
             himl = h ++ ".iml"
             mods = "modules.xml"
             imods = ".idea" </> mods
             pcabal = "package.cabal"
             hcabal = h ++ ".cabal"
             src = "src"
         in do tmp <- getTemporaryDirectory
               now <- getCurrentTime
               let dir = tmp </> h </> show now
               createDirectoryIfMissing True dir
               cbl <- readFile pcabal
               writeFile (dir </> hcabal) (replace "Name:               package" ("Name:               " ++ h) cbl)
               copyFile piml (dir </> himl)
               iml <- readFile imods
               writeFile (dir </> mods) (replace piml himl iml)
               removeFile piml
               removeFile pcabal
               -- OMG I am such a nasty hacker
               case t of
                 [] -> return ()
                 (m:_) -> let n = split (=='.') m
                              s [] = error "unexpected empty list"
                              s [l] = ([], l)
                              s (hh:tt@(_:_)) = let (p, k) = s tt
                                            in (hh:p, k)
                          in case n of
                               [] -> return ()
                               _ -> let (p, k) = s n
                                        p' = src </> joinPath p
                                        k' = k ++ ".hs"
                                    in do createDirectoryIfMissing True p'
                                          let m' = intercalate "." p ++ '.' : k
                                          writeFile (p' </> k') ("module " ++ m' ++ " where\n")
                                          hc <- readFile (dir </> hcabal)
                                          -- eek!
                                          length hc `seq` writeFile (dir </> hcabal) (replace "Exposed-Modules:\n                    M" ("Exposed-Modules:\n                    " ++ m') hc)
                                          removeFile (src </> "M.hs")
               copyFile (dir </> himl) himl
               copyFile (dir </> hcabal) hcabal
               copyFile (dir </> mods) imods
               

replace ::
  Eq a =>
  [a]
  -> [a]
  -> [a]
  -> [a]
replace [] _ v =
  v  
replace _ _ [] =
  []  
replace x y v@(c:w) =
  let fd [] [] =
        Just []
      fd [] e@(_:_) =
        Just e
      fd (_:_) [] =
        Nothing  
      fd (h:t) (h':t') =
        if h == h'
          then
            fd t t'
          else
            Nothing       
  in case fd x v of
       Nothing -> c : replace x y w
       Just q -> y ++ replace x y q

split ::
  (a -> Bool)
  -> [a]
  -> [[a]]
split p =
  unfoldr (\x -> case x of
                   [] -> Nothing
                   _ -> Just . fmap (drop 1) . break p $ x)

